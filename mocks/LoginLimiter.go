// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockLoginLimiter creates a new instance of MockLoginLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginLimiter {
	mock := &MockLoginLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoginLimiter is an autogenerated mock type for the LoginLimiter type
type MockLoginLimiter struct {
	mock.Mock
}

type MockLoginLimiter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginLimiter) EXPECT() *MockLoginLimiter_Expecter {
	return &MockLoginLimiter_Expecter{mock: &_m.Mock}
}

// IsAccountLocked provides a mock function for the type MockLoginLimiter
func (_mock *MockLoginLimiter) IsAccountLocked(key string) bool {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for IsAccountLocked")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockLoginLimiter_IsAccountLocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAccountLocked'
type MockLoginLimiter_IsAccountLocked_Call struct {
	*mock.Call
}

// IsAccountLocked is a helper method to define mock.On call
//   - key string
func (_e *MockLoginLimiter_Expecter) IsAccountLocked(key interface{}) *MockLoginLimiter_IsAccountLocked_Call {
	return &MockLoginLimiter_IsAccountLocked_Call{Call: _e.mock.On("IsAccountLocked", key)}
}

func (_c *MockLoginLimiter_IsAccountLocked_Call) Run(run func(key string)) *MockLoginLimiter_IsAccountLocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoginLimiter_IsAccountLocked_Call) Return(b bool) *MockLoginLimiter_IsAccountLocked_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockLoginLimiter_IsAccountLocked_Call) RunAndReturn(run func(key string) bool) *MockLoginLimiter_IsAccountLocked_Call {
	_c.Call.Return(run)
	return _c
}

// MarkFailedAttempt provides a mock function for the type MockLoginLimiter
func (_mock *MockLoginLimiter) MarkFailedAttempt(key string) (int, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for MarkFailedAttempt")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginLimiter_MarkFailedAttempt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkFailedAttempt'
type MockLoginLimiter_MarkFailedAttempt_Call struct {
	*mock.Call
}

// MarkFailedAttempt is a helper method to define mock.On call
//   - key string
func (_e *MockLoginLimiter_Expecter) MarkFailedAttempt(key interface{}) *MockLoginLimiter_MarkFailedAttempt_Call {
	return &MockLoginLimiter_MarkFailedAttempt_Call{Call: _e.mock.On("MarkFailedAttempt", key)}
}

func (_c *MockLoginLimiter_MarkFailedAttempt_Call) Run(run func(key string)) *MockLoginLimiter_MarkFailedAttempt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoginLimiter_MarkFailedAttempt_Call) Return(n int, err error) *MockLoginLimiter_MarkFailedAttempt_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockLoginLimiter_MarkFailedAttempt_Call) RunAndReturn(run func(key string) (int, error)) *MockLoginLimiter_MarkFailedAttempt_Call {
	_c.Call.Return(run)
	return _c
}
