// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	user "github.com/lthummus/auththingie2/user"

	webauthn "github.com/go-webauthn/webauthn/webauthn"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *DB) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, _a1
func (_m *DB) CreateUser(ctx context.Context, _a1 *user.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteKey provides a mock function with given fields: ctx, keyID
func (_m *DB) DeleteKey(ctx context.Context, keyID string) error {
	ret := _m.Called(ctx, keyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, keyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, userId
func (_m *DB) DeleteUser(ctx context.Context, userId string) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindKeyById provides a mock function with given fields: ctx, keyID
func (_m *DB) FindKeyById(ctx context.Context, keyID string) (user.Passkey, error) {
	ret := _m.Called(ctx, keyID)

	var r0 user.Passkey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user.Passkey, error)); ok {
		return rf(ctx, keyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user.Passkey); ok {
		r0 = rf(ctx, keyID)
	} else {
		r0 = ret.Get(0).(user.Passkey)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByCredentialInfo provides a mock function with given fields: ctx, rid, handle
func (_m *DB) FindUserByCredentialInfo(ctx context.Context, rid []byte, handle []byte) (*user.User, error) {
	ret := _m.Called(ctx, rid, handle)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte) (*user.User, error)); ok {
		return rf(ctx, rid, handle)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte) *user.User); ok {
		r0 = rf(ctx, rid, handle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, []byte) error); ok {
		r1 = rf(ctx, rid, handle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *DB) GetAllUsers(ctx context.Context) ([]*user.AdminListUser, error) {
	ret := _m.Called(ctx)

	var r0 []*user.AdminListUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*user.AdminListUser, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*user.AdminListUser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.AdminListUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByGuid provides a mock function with given fields: ctx, guid
func (_m *DB) GetUserByGuid(ctx context.Context, guid string) (*user.User, error) {
	ret := _m.Called(ctx, guid)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return rf(ctx, guid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = rf(ctx, guid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, guid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *DB) GetUserByUsername(ctx context.Context, username string) (*user.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NeedsSetup provides a mock function with given fields: ctx
func (_m *DB) NeedsSetup(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCredentialForUser provides a mock function with given fields: ctx, userId, credential
func (_m *DB) SaveCredentialForUser(ctx context.Context, userId string, credential *webauthn.Credential) error {
	ret := _m.Called(ctx, userId, credential)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *webauthn.Credential) error); ok {
		r0 = rf(ctx, userId, credential)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: ctx, _a1
func (_m *DB) SaveUser(ctx context.Context, _a1 *user.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserEnabled provides a mock function with given fields: ctx, userId, enabled
func (_m *DB) SetUserEnabled(ctx context.Context, userId string, enabled bool) error {
	ret := _m.Called(ctx, userId, enabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, userId, enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCredentialOnLogin provides a mock function with given fields: ctx, credential
func (_m *DB) UpdateCredentialOnLogin(ctx context.Context, credential *webauthn.Credential) error {
	ret := _m.Called(ctx, credential)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *webauthn.Credential) error); ok {
		r0 = rf(ctx, credential)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateKeyName provides a mock function with given fields: ctx, keyID, name
func (_m *DB) UpdateKeyName(ctx context.Context, keyID string, name *string) error {
	ret := _m.Called(ctx, keyID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *string) error); ok {
		r0 = rf(ctx, keyID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, _a1
func (_m *DB) UpdatePassword(ctx context.Context, _a1 *user.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTOTPSeed provides a mock function with given fields: ctx, userID, secret
func (_m *DB) UpdateTOTPSeed(ctx context.Context, userID string, secret string) error {
	ret := _m.Called(ctx, userID, secret)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
