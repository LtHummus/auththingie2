// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/go-webauthn/webauthn/webauthn"
	"github.com/lthummus/auththingie2/user"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

type MockDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDB) EXPECT() *MockDB_Expecter {
	return &MockDB_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockDB
func (_mock *MockDB) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDB_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDB_Expecter) Close() *MockDB_Close_Call {
	return &MockDB_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDB_Close_Call) Run(run func()) *MockDB_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDB_Close_Call) Return(err error) *MockDB_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_Close_Call) RunAndReturn(run func() error) *MockDB_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockDB
func (_mock *MockDB) CreateUser(ctx context.Context, user1 *user.User) error {
	ret := _mock.Called(ctx, user1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = returnFunc(ctx, user1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockDB_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user1 *user.User
func (_e *MockDB_Expecter) CreateUser(ctx interface{}, user1 interface{}) *MockDB_CreateUser_Call {
	return &MockDB_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user1)}
}

func (_c *MockDB_CreateUser_Call) Run(run func(ctx context.Context, user1 *user.User)) *MockDB_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *user.User
		if args[1] != nil {
			arg1 = args[1].(*user.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDB_CreateUser_Call) Return(err error) *MockDB_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user1 *user.User) error) *MockDB_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKey provides a mock function for the type MockDB
func (_mock *MockDB) DeleteKey(ctx context.Context, keyID string) error {
	ret := _mock.Called(ctx, keyID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, keyID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_DeleteKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKey'
type MockDB_DeleteKey_Call struct {
	*mock.Call
}

// DeleteKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyID string
func (_e *MockDB_Expecter) DeleteKey(ctx interface{}, keyID interface{}) *MockDB_DeleteKey_Call {
	return &MockDB_DeleteKey_Call{Call: _e.mock.On("DeleteKey", ctx, keyID)}
}

func (_c *MockDB_DeleteKey_Call) Run(run func(ctx context.Context, keyID string)) *MockDB_DeleteKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDB_DeleteKey_Call) Return(err error) *MockDB_DeleteKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_DeleteKey_Call) RunAndReturn(run func(ctx context.Context, keyID string) error) *MockDB_DeleteKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockDB
func (_mock *MockDB) DeleteUser(ctx context.Context, userId string) error {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockDB_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockDB_Expecter) DeleteUser(ctx interface{}, userId interface{}) *MockDB_DeleteUser_Call {
	return &MockDB_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, userId)}
}

func (_c *MockDB_DeleteUser_Call) Run(run func(ctx context.Context, userId string)) *MockDB_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDB_DeleteUser_Call) Return(err error) *MockDB_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, userId string) error) *MockDB_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindKeyById provides a mock function for the type MockDB
func (_mock *MockDB) FindKeyById(ctx context.Context, keyID string) (user.Passkey, error) {
	ret := _mock.Called(ctx, keyID)

	if len(ret) == 0 {
		panic("no return value specified for FindKeyById")
	}

	var r0 user.Passkey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (user.Passkey, error)); ok {
		return returnFunc(ctx, keyID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) user.Passkey); ok {
		r0 = returnFunc(ctx, keyID)
	} else {
		r0 = ret.Get(0).(user.Passkey)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, keyID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDB_FindKeyById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindKeyById'
type MockDB_FindKeyById_Call struct {
	*mock.Call
}

// FindKeyById is a helper method to define mock.On call
//   - ctx context.Context
//   - keyID string
func (_e *MockDB_Expecter) FindKeyById(ctx interface{}, keyID interface{}) *MockDB_FindKeyById_Call {
	return &MockDB_FindKeyById_Call{Call: _e.mock.On("FindKeyById", ctx, keyID)}
}

func (_c *MockDB_FindKeyById_Call) Run(run func(ctx context.Context, keyID string)) *MockDB_FindKeyById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDB_FindKeyById_Call) Return(passkey user.Passkey, err error) *MockDB_FindKeyById_Call {
	_c.Call.Return(passkey, err)
	return _c
}

func (_c *MockDB_FindKeyById_Call) RunAndReturn(run func(ctx context.Context, keyID string) (user.Passkey, error)) *MockDB_FindKeyById_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByCredentialInfo provides a mock function for the type MockDB
func (_mock *MockDB) FindUserByCredentialInfo(ctx context.Context, rid []byte, handle []byte) (*user.User, error) {
	ret := _mock.Called(ctx, rid, handle)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByCredentialInfo")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, []byte) (*user.User, error)); ok {
		return returnFunc(ctx, rid, handle)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, []byte) *user.User); ok {
		r0 = returnFunc(ctx, rid, handle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, []byte) error); ok {
		r1 = returnFunc(ctx, rid, handle)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDB_FindUserByCredentialInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByCredentialInfo'
type MockDB_FindUserByCredentialInfo_Call struct {
	*mock.Call
}

// FindUserByCredentialInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - rid []byte
//   - handle []byte
func (_e *MockDB_Expecter) FindUserByCredentialInfo(ctx interface{}, rid interface{}, handle interface{}) *MockDB_FindUserByCredentialInfo_Call {
	return &MockDB_FindUserByCredentialInfo_Call{Call: _e.mock.On("FindUserByCredentialInfo", ctx, rid, handle)}
}

func (_c *MockDB_FindUserByCredentialInfo_Call) Run(run func(ctx context.Context, rid []byte, handle []byte)) *MockDB_FindUserByCredentialInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDB_FindUserByCredentialInfo_Call) Return(user1 *user.User, err error) *MockDB_FindUserByCredentialInfo_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockDB_FindUserByCredentialInfo_Call) RunAndReturn(run func(ctx context.Context, rid []byte, handle []byte) (*user.User, error)) *MockDB_FindUserByCredentialInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function for the type MockDB
func (_mock *MockDB) GetAllUsers(ctx context.Context) ([]*user.AdminListUser, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*user.AdminListUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*user.AdminListUser, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*user.AdminListUser); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.AdminListUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDB_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockDB_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDB_Expecter) GetAllUsers(ctx interface{}) *MockDB_GetAllUsers_Call {
	return &MockDB_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *MockDB_GetAllUsers_Call) Run(run func(ctx context.Context)) *MockDB_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDB_GetAllUsers_Call) Return(adminListUsers []*user.AdminListUser, err error) *MockDB_GetAllUsers_Call {
	_c.Call.Return(adminListUsers, err)
	return _c
}

func (_c *MockDB_GetAllUsers_Call) RunAndReturn(run func(ctx context.Context) ([]*user.AdminListUser, error)) *MockDB_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByGuid provides a mock function for the type MockDB
func (_mock *MockDB) GetUserByGuid(ctx context.Context, guid string) (*user.User, error) {
	ret := _mock.Called(ctx, guid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByGuid")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return returnFunc(ctx, guid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = returnFunc(ctx, guid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, guid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDB_GetUserByGuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByGuid'
type MockDB_GetUserByGuid_Call struct {
	*mock.Call
}

// GetUserByGuid is a helper method to define mock.On call
//   - ctx context.Context
//   - guid string
func (_e *MockDB_Expecter) GetUserByGuid(ctx interface{}, guid interface{}) *MockDB_GetUserByGuid_Call {
	return &MockDB_GetUserByGuid_Call{Call: _e.mock.On("GetUserByGuid", ctx, guid)}
}

func (_c *MockDB_GetUserByGuid_Call) Run(run func(ctx context.Context, guid string)) *MockDB_GetUserByGuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDB_GetUserByGuid_Call) Return(user1 *user.User, err error) *MockDB_GetUserByGuid_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockDB_GetUserByGuid_Call) RunAndReturn(run func(ctx context.Context, guid string) (*user.User, error)) *MockDB_GetUserByGuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function for the type MockDB
func (_mock *MockDB) GetUserByUsername(ctx context.Context, username string) (*user.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDB_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockDB_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockDB_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockDB_GetUserByUsername_Call {
	return &MockDB_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockDB_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockDB_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDB_GetUserByUsername_Call) Return(user1 *user.User, err error) *MockDB_GetUserByUsername_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockDB_GetUserByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*user.User, error)) *MockDB_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// NeedsSetup provides a mock function for the type MockDB
func (_mock *MockDB) NeedsSetup(ctx context.Context) (bool, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NeedsSetup")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDB_NeedsSetup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NeedsSetup'
type MockDB_NeedsSetup_Call struct {
	*mock.Call
}

// NeedsSetup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDB_Expecter) NeedsSetup(ctx interface{}) *MockDB_NeedsSetup_Call {
	return &MockDB_NeedsSetup_Call{Call: _e.mock.On("NeedsSetup", ctx)}
}

func (_c *MockDB_NeedsSetup_Call) Run(run func(ctx context.Context)) *MockDB_NeedsSetup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDB_NeedsSetup_Call) Return(b bool, err error) *MockDB_NeedsSetup_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockDB_NeedsSetup_Call) RunAndReturn(run func(ctx context.Context) (bool, error)) *MockDB_NeedsSetup_Call {
	_c.Call.Return(run)
	return _c
}

// SaveCredentialForUser provides a mock function for the type MockDB
func (_mock *MockDB) SaveCredentialForUser(ctx context.Context, userId string, credential *webauthn.Credential) error {
	ret := _mock.Called(ctx, userId, credential)

	if len(ret) == 0 {
		panic("no return value specified for SaveCredentialForUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *webauthn.Credential) error); ok {
		r0 = returnFunc(ctx, userId, credential)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_SaveCredentialForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveCredentialForUser'
type MockDB_SaveCredentialForUser_Call struct {
	*mock.Call
}

// SaveCredentialForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - credential *webauthn.Credential
func (_e *MockDB_Expecter) SaveCredentialForUser(ctx interface{}, userId interface{}, credential interface{}) *MockDB_SaveCredentialForUser_Call {
	return &MockDB_SaveCredentialForUser_Call{Call: _e.mock.On("SaveCredentialForUser", ctx, userId, credential)}
}

func (_c *MockDB_SaveCredentialForUser_Call) Run(run func(ctx context.Context, userId string, credential *webauthn.Credential)) *MockDB_SaveCredentialForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *webauthn.Credential
		if args[2] != nil {
			arg2 = args[2].(*webauthn.Credential)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDB_SaveCredentialForUser_Call) Return(err error) *MockDB_SaveCredentialForUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_SaveCredentialForUser_Call) RunAndReturn(run func(ctx context.Context, userId string, credential *webauthn.Credential) error) *MockDB_SaveCredentialForUser_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function for the type MockDB
func (_mock *MockDB) SaveUser(ctx context.Context, user1 *user.User) error {
	ret := _mock.Called(ctx, user1)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = returnFunc(ctx, user1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type MockDB_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user1 *user.User
func (_e *MockDB_Expecter) SaveUser(ctx interface{}, user1 interface{}) *MockDB_SaveUser_Call {
	return &MockDB_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, user1)}
}

func (_c *MockDB_SaveUser_Call) Run(run func(ctx context.Context, user1 *user.User)) *MockDB_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *user.User
		if args[1] != nil {
			arg1 = args[1].(*user.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDB_SaveUser_Call) Return(err error) *MockDB_SaveUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_SaveUser_Call) RunAndReturn(run func(ctx context.Context, user1 *user.User) error) *MockDB_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserEnabled provides a mock function for the type MockDB
func (_mock *MockDB) SetUserEnabled(ctx context.Context, userId string, enabled bool) error {
	ret := _mock.Called(ctx, userId, enabled)

	if len(ret) == 0 {
		panic("no return value specified for SetUserEnabled")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = returnFunc(ctx, userId, enabled)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_SetUserEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserEnabled'
type MockDB_SetUserEnabled_Call struct {
	*mock.Call
}

// SetUserEnabled is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - enabled bool
func (_e *MockDB_Expecter) SetUserEnabled(ctx interface{}, userId interface{}, enabled interface{}) *MockDB_SetUserEnabled_Call {
	return &MockDB_SetUserEnabled_Call{Call: _e.mock.On("SetUserEnabled", ctx, userId, enabled)}
}

func (_c *MockDB_SetUserEnabled_Call) Run(run func(ctx context.Context, userId string, enabled bool)) *MockDB_SetUserEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDB_SetUserEnabled_Call) Return(err error) *MockDB_SetUserEnabled_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_SetUserEnabled_Call) RunAndReturn(run func(ctx context.Context, userId string, enabled bool) error) *MockDB_SetUserEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCredentialOnLogin provides a mock function for the type MockDB
func (_mock *MockDB) UpdateCredentialOnLogin(ctx context.Context, credential *webauthn.Credential) error {
	ret := _mock.Called(ctx, credential)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredentialOnLogin")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *webauthn.Credential) error); ok {
		r0 = returnFunc(ctx, credential)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_UpdateCredentialOnLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCredentialOnLogin'
type MockDB_UpdateCredentialOnLogin_Call struct {
	*mock.Call
}

// UpdateCredentialOnLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - credential *webauthn.Credential
func (_e *MockDB_Expecter) UpdateCredentialOnLogin(ctx interface{}, credential interface{}) *MockDB_UpdateCredentialOnLogin_Call {
	return &MockDB_UpdateCredentialOnLogin_Call{Call: _e.mock.On("UpdateCredentialOnLogin", ctx, credential)}
}

func (_c *MockDB_UpdateCredentialOnLogin_Call) Run(run func(ctx context.Context, credential *webauthn.Credential)) *MockDB_UpdateCredentialOnLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *webauthn.Credential
		if args[1] != nil {
			arg1 = args[1].(*webauthn.Credential)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDB_UpdateCredentialOnLogin_Call) Return(err error) *MockDB_UpdateCredentialOnLogin_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_UpdateCredentialOnLogin_Call) RunAndReturn(run func(ctx context.Context, credential *webauthn.Credential) error) *MockDB_UpdateCredentialOnLogin_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateKeyName provides a mock function for the type MockDB
func (_mock *MockDB) UpdateKeyName(ctx context.Context, keyID string, name *string) error {
	ret := _mock.Called(ctx, keyID, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKeyName")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) error); ok {
		r0 = returnFunc(ctx, keyID, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_UpdateKeyName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateKeyName'
type MockDB_UpdateKeyName_Call struct {
	*mock.Call
}

// UpdateKeyName is a helper method to define mock.On call
//   - ctx context.Context
//   - keyID string
//   - name *string
func (_e *MockDB_Expecter) UpdateKeyName(ctx interface{}, keyID interface{}, name interface{}) *MockDB_UpdateKeyName_Call {
	return &MockDB_UpdateKeyName_Call{Call: _e.mock.On("UpdateKeyName", ctx, keyID, name)}
}

func (_c *MockDB_UpdateKeyName_Call) Run(run func(ctx context.Context, keyID string, name *string)) *MockDB_UpdateKeyName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDB_UpdateKeyName_Call) Return(err error) *MockDB_UpdateKeyName_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_UpdateKeyName_Call) RunAndReturn(run func(ctx context.Context, keyID string, name *string) error) *MockDB_UpdateKeyName_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function for the type MockDB
func (_mock *MockDB) UpdatePassword(ctx context.Context, user1 *user.User) error {
	ret := _mock.Called(ctx, user1)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = returnFunc(ctx, user1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockDB_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - user1 *user.User
func (_e *MockDB_Expecter) UpdatePassword(ctx interface{}, user1 interface{}) *MockDB_UpdatePassword_Call {
	return &MockDB_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, user1)}
}

func (_c *MockDB_UpdatePassword_Call) Run(run func(ctx context.Context, user1 *user.User)) *MockDB_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *user.User
		if args[1] != nil {
			arg1 = args[1].(*user.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDB_UpdatePassword_Call) Return(err error) *MockDB_UpdatePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_UpdatePassword_Call) RunAndReturn(run func(ctx context.Context, user1 *user.User) error) *MockDB_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTOTPSeed provides a mock function for the type MockDB
func (_mock *MockDB) UpdateTOTPSeed(ctx context.Context, userID string, secret string) error {
	ret := _mock.Called(ctx, userID, secret)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTOTPSeed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, userID, secret)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_UpdateTOTPSeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTOTPSeed'
type MockDB_UpdateTOTPSeed_Call struct {
	*mock.Call
}

// UpdateTOTPSeed is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - secret string
func (_e *MockDB_Expecter) UpdateTOTPSeed(ctx interface{}, userID interface{}, secret interface{}) *MockDB_UpdateTOTPSeed_Call {
	return &MockDB_UpdateTOTPSeed_Call{Call: _e.mock.On("UpdateTOTPSeed", ctx, userID, secret)}
}

func (_c *MockDB_UpdateTOTPSeed_Call) Run(run func(ctx context.Context, userID string, secret string)) *MockDB_UpdateTOTPSeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDB_UpdateTOTPSeed_Call) Return(err error) *MockDB_UpdateTOTPSeed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_UpdateTOTPSeed_Call) RunAndReturn(run func(ctx context.Context, userID string, secret string) error) *MockDB_UpdateTOTPSeed_Call {
	_c.Call.Return(run)
	return _c
}
