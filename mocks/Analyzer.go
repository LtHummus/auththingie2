// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/lthummus/auththingie2/rules"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAnalyzer creates a new instance of MockAnalyzer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnalyzer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnalyzer {
	mock := &MockAnalyzer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAnalyzer is an autogenerated mock type for the Analyzer type
type MockAnalyzer struct {
	mock.Mock
}

type MockAnalyzer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnalyzer) EXPECT() *MockAnalyzer_Expecter {
	return &MockAnalyzer_Expecter{mock: &_m.Mock}
}

// AddRule provides a mock function for the type MockAnalyzer
func (_mock *MockAnalyzer) AddRule(r rules.Rule) {
	_mock.Called(r)
	return
}

// MockAnalyzer_AddRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRule'
type MockAnalyzer_AddRule_Call struct {
	*mock.Call
}

// AddRule is a helper method to define mock.On call
//   - r rules.Rule
func (_e *MockAnalyzer_Expecter) AddRule(r interface{}) *MockAnalyzer_AddRule_Call {
	return &MockAnalyzer_AddRule_Call{Call: _e.mock.On("AddRule", r)}
}

func (_c *MockAnalyzer_AddRule_Call) Run(run func(r rules.Rule)) *MockAnalyzer_AddRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 rules.Rule
		if args[0] != nil {
			arg0 = args[0].(rules.Rule)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAnalyzer_AddRule_Call) Return() *MockAnalyzer_AddRule_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAnalyzer_AddRule_Call) RunAndReturn(run func(r rules.Rule)) *MockAnalyzer_AddRule_Call {
	_c.Run(run)
	return _c
}

// Errors provides a mock function for the type MockAnalyzer
func (_mock *MockAnalyzer) Errors() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Errors")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockAnalyzer_Errors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errors'
type MockAnalyzer_Errors_Call struct {
	*mock.Call
}

// Errors is a helper method to define mock.On call
func (_e *MockAnalyzer_Expecter) Errors() *MockAnalyzer_Errors_Call {
	return &MockAnalyzer_Errors_Call{Call: _e.mock.On("Errors")}
}

func (_c *MockAnalyzer_Errors_Call) Run(run func()) *MockAnalyzer_Errors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAnalyzer_Errors_Call) Return(strings []string) *MockAnalyzer_Errors_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockAnalyzer_Errors_Call) RunAndReturn(run func() []string) *MockAnalyzer_Errors_Call {
	_c.Call.Return(run)
	return _c
}

// KnownRoles provides a mock function for the type MockAnalyzer
func (_mock *MockAnalyzer) KnownRoles() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for KnownRoles")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockAnalyzer_KnownRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KnownRoles'
type MockAnalyzer_KnownRoles_Call struct {
	*mock.Call
}

// KnownRoles is a helper method to define mock.On call
func (_e *MockAnalyzer_Expecter) KnownRoles() *MockAnalyzer_KnownRoles_Call {
	return &MockAnalyzer_KnownRoles_Call{Call: _e.mock.On("KnownRoles")}
}

func (_c *MockAnalyzer_KnownRoles_Call) Run(run func()) *MockAnalyzer_KnownRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAnalyzer_KnownRoles_Call) Return(strings []string) *MockAnalyzer_KnownRoles_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockAnalyzer_KnownRoles_Call) RunAndReturn(run func() []string) *MockAnalyzer_KnownRoles_Call {
	_c.Call.Return(run)
	return _c
}

// MatchesRule provides a mock function for the type MockAnalyzer
func (_mock *MockAnalyzer) MatchesRule(ri *rules.RequestInfo) *rules.Rule {
	ret := _mock.Called(ri)

	if len(ret) == 0 {
		panic("no return value specified for MatchesRule")
	}

	var r0 *rules.Rule
	if returnFunc, ok := ret.Get(0).(func(*rules.RequestInfo) *rules.Rule); ok {
		r0 = returnFunc(ri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rules.Rule)
		}
	}
	return r0
}

// MockAnalyzer_MatchesRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchesRule'
type MockAnalyzer_MatchesRule_Call struct {
	*mock.Call
}

// MatchesRule is a helper method to define mock.On call
//   - ri *rules.RequestInfo
func (_e *MockAnalyzer_Expecter) MatchesRule(ri interface{}) *MockAnalyzer_MatchesRule_Call {
	return &MockAnalyzer_MatchesRule_Call{Call: _e.mock.On("MatchesRule", ri)}
}

func (_c *MockAnalyzer_MatchesRule_Call) Run(run func(ri *rules.RequestInfo)) *MockAnalyzer_MatchesRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *rules.RequestInfo
		if args[0] != nil {
			arg0 = args[0].(*rules.RequestInfo)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAnalyzer_MatchesRule_Call) Return(rule *rules.Rule) *MockAnalyzer_MatchesRule_Call {
	_c.Call.Return(rule)
	return _c
}

func (_c *MockAnalyzer_MatchesRule_Call) RunAndReturn(run func(ri *rules.RequestInfo) *rules.Rule) *MockAnalyzer_MatchesRule_Call {
	_c.Call.Return(run)
	return _c
}

// Rules provides a mock function for the type MockAnalyzer
func (_mock *MockAnalyzer) Rules() []rules.Rule {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rules")
	}

	var r0 []rules.Rule
	if returnFunc, ok := ret.Get(0).(func() []rules.Rule); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rules.Rule)
		}
	}
	return r0
}

// MockAnalyzer_Rules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rules'
type MockAnalyzer_Rules_Call struct {
	*mock.Call
}

// Rules is a helper method to define mock.On call
func (_e *MockAnalyzer_Expecter) Rules() *MockAnalyzer_Rules_Call {
	return &MockAnalyzer_Rules_Call{Call: _e.mock.On("Rules")}
}

func (_c *MockAnalyzer_Rules_Call) Run(run func()) *MockAnalyzer_Rules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAnalyzer_Rules_Call) Return(rules1 []rules.Rule) *MockAnalyzer_Rules_Call {
	_c.Call.Return(rules1)
	return _c
}

func (_c *MockAnalyzer_Rules_Call) RunAndReturn(run func() []rules.Rule) *MockAnalyzer_Rules_Call {
	_c.Call.Return(run)
	return _c
}

// WriteConfig provides a mock function for the type MockAnalyzer
func (_mock *MockAnalyzer) WriteConfig() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WriteConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAnalyzer_WriteConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteConfig'
type MockAnalyzer_WriteConfig_Call struct {
	*mock.Call
}

// WriteConfig is a helper method to define mock.On call
func (_e *MockAnalyzer_Expecter) WriteConfig() *MockAnalyzer_WriteConfig_Call {
	return &MockAnalyzer_WriteConfig_Call{Call: _e.mock.On("WriteConfig")}
}

func (_c *MockAnalyzer_WriteConfig_Call) Run(run func()) *MockAnalyzer_WriteConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAnalyzer_WriteConfig_Call) Return(err error) *MockAnalyzer_WriteConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAnalyzer_WriteConfig_Call) RunAndReturn(run func() error) *MockAnalyzer_WriteConfig_Call {
	_c.Call.Return(run)
	return _c
}
