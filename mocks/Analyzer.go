// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	rules2 "github.com/lthummus/auththingie2/rules"
	mock "github.com/stretchr/testify/mock"
)

// Analyzer is an autogenerated mock type for the Analyzer type
type Analyzer struct {
	mock.Mock
}

// AddRule provides a mock function with given fields: r
func (_m *Analyzer) AddRule(r rules2.Rule) {
	_m.Called(r)
}

// Errors provides a mock function with given fields:
func (_m *Analyzer) Errors() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// KnownRoles provides a mock function with given fields:
func (_m *Analyzer) KnownRoles() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MatchesRule provides a mock function with given fields: ri
func (_m *Analyzer) MatchesRule(ri *rules2.RequestInfo) *rules2.Rule {
	ret := _m.Called(ri)

	var r0 *rules2.Rule
	if rf, ok := ret.Get(0).(func(*rules2.RequestInfo) *rules2.Rule); ok {
		r0 = rf(ri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rules2.Rule)
		}
	}

	return r0
}

// Rules provides a mock function with given fields:
func (_m *Analyzer) Rules() []rules2.Rule {
	ret := _m.Called()

	var r0 []rules2.Rule
	if rf, ok := ret.Get(0).(func() []rules2.Rule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rules2.Rule)
		}
	}

	return r0
}

// WriteConfig provides a mock function with given fields:
func (_m *Analyzer) WriteConfig() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAnalyzer creates a new instance of Analyzer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnalyzer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Analyzer {
	mock := &Analyzer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
